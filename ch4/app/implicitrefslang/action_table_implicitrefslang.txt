0	(	Shift 4
0	-	Shift 3
0	begin	Shift 11
0	identifier	Shift 7
0	if	Shift 6
0	integer_number	Shift 2
0	let	Shift 8
0	letrec	Shift 9
0	proc	Shift 10
0	set	Shift 12
0	zero?	Shift 5
1	$	Accept
2	(	Reduce 1
2	)	Reduce 1
2	,	Reduce 1
2	-	Reduce 1
2	;	Reduce 1
2	begin	Reduce 1
2	else	Reduce 1
2	end	Reduce 1
2	identifier	Reduce 1
2	if	Reduce 1
2	in	Reduce 1
2	integer_number	Reduce 1
2	let	Reduce 1
2	letrec	Reduce 1
2	proc	Reduce 1
2	set	Reduce 1
2	then	Reduce 1
2	zero?	Reduce 1
2	$	Reduce 1
3	(	Shift 14
3	integer_number	Shift 13
4	(	Shift 4
4	-	Shift 3
4	begin	Shift 11
4	identifier	Shift 7
4	if	Shift 6
4	integer_number	Shift 2
4	let	Shift 8
4	letrec	Shift 9
4	proc	Shift 10
4	set	Shift 12
4	zero?	Shift 5
5	(	Shift 16
6	(	Shift 4
6	-	Shift 3
6	begin	Shift 11
6	identifier	Shift 7
6	if	Shift 6
6	integer_number	Shift 2
6	let	Shift 8
6	letrec	Shift 9
6	proc	Shift 10
6	set	Shift 12
6	zero?	Shift 5
7	(	Reduce 6
7	)	Reduce 6
7	,	Reduce 6
7	-	Reduce 6
7	;	Reduce 6
7	begin	Reduce 6
7	else	Reduce 6
7	end	Reduce 6
7	identifier	Reduce 6
7	if	Reduce 6
7	in	Reduce 6
7	integer_number	Reduce 6
7	let	Reduce 6
7	letrec	Reduce 6
7	proc	Reduce 6
7	set	Reduce 6
7	then	Reduce 6
7	zero?	Reduce 6
7	$	Reduce 6
8	identifier	Shift 18
9	identifier	Shift 20
10	(	Shift 21
11	(	Shift 4
11	-	Shift 3
11	begin	Shift 11
11	identifier	Shift 7
11	if	Shift 6
11	integer_number	Shift 2
11	let	Shift 8
11	letrec	Shift 9
11	proc	Shift 10
11	set	Shift 12
11	zero?	Shift 5
12	identifier	Shift 24
13	(	Reduce 2
13	)	Reduce 2
13	,	Reduce 2
13	-	Reduce 2
13	;	Reduce 2
13	begin	Reduce 2
13	else	Reduce 2
13	end	Reduce 2
13	identifier	Reduce 2
13	if	Reduce 2
13	in	Reduce 2
13	integer_number	Reduce 2
13	let	Reduce 2
13	letrec	Reduce 2
13	proc	Reduce 2
13	set	Reduce 2
13	then	Reduce 2
13	zero?	Reduce 2
13	$	Reduce 2
14	(	Shift 4
14	-	Shift 3
14	begin	Shift 11
14	identifier	Shift 7
14	if	Shift 6
14	integer_number	Shift 2
14	let	Shift 8
14	letrec	Shift 9
14	proc	Shift 10
14	set	Shift 12
14	zero?	Shift 5
15	(	Shift 4
15	-	Shift 3
15	begin	Shift 11
15	identifier	Shift 7
15	if	Shift 6
15	integer_number	Shift 2
15	let	Shift 8
15	letrec	Shift 9
15	proc	Shift 10
15	set	Shift 12
15	zero?	Shift 5
16	(	Shift 4
16	-	Shift 3
16	begin	Shift 11
16	identifier	Shift 7
16	if	Shift 6
16	integer_number	Shift 2
16	let	Shift 8
16	letrec	Shift 9
16	proc	Shift 10
16	set	Shift 12
16	zero?	Shift 5
17	then	Shift 28
18	=	Shift 29
19	in	Shift 30
20	(	Shift 31
21	identifier	Shift 32
22	;	Shift 33
22	end	Reduce 15
23	end	Shift 34
24	=	Shift 35
25	,	Shift 36
26	)	Shift 37
27	)	Shift 38
28	(	Shift 4
28	-	Shift 3
28	begin	Shift 11
28	identifier	Shift 7
28	if	Shift 6
28	integer_number	Shift 2
28	let	Shift 8
28	letrec	Shift 9
28	proc	Shift 10
28	set	Shift 12
28	zero?	Shift 5
29	(	Shift 4
29	-	Shift 3
29	begin	Shift 11
29	identifier	Shift 7
29	if	Shift 6
29	integer_number	Shift 2
29	let	Shift 8
29	letrec	Shift 9
29	proc	Shift 10
29	set	Shift 12
29	zero?	Shift 5
30	(	Shift 4
30	-	Shift 3
30	begin	Shift 11
30	identifier	Shift 7
30	if	Shift 6
30	integer_number	Shift 2
30	let	Shift 8
30	letrec	Shift 9
30	proc	Shift 10
30	set	Shift 12
30	zero?	Shift 5
31	identifier	Shift 42
32	)	Shift 43
33	(	Shift 4
33	-	Shift 3
33	begin	Shift 11
33	identifier	Shift 7
33	if	Shift 6
33	integer_number	Shift 2
33	let	Shift 8
33	letrec	Shift 9
33	proc	Shift 10
33	set	Shift 12
33	zero?	Shift 5
34	(	Reduce 11
34	)	Reduce 11
34	,	Reduce 11
34	-	Reduce 11
34	;	Reduce 11
34	begin	Reduce 11
34	else	Reduce 11
34	end	Reduce 11
34	identifier	Reduce 11
34	if	Reduce 11
34	in	Reduce 11
34	integer_number	Reduce 11
34	let	Reduce 11
34	letrec	Reduce 11
34	proc	Reduce 11
34	set	Reduce 11
34	then	Reduce 11
34	zero?	Reduce 11
34	$	Reduce 11
35	(	Shift 4
35	-	Shift 3
35	begin	Shift 11
35	identifier	Shift 7
35	if	Shift 6
35	integer_number	Shift 2
35	let	Shift 8
35	letrec	Shift 9
35	proc	Shift 10
35	set	Shift 12
35	zero?	Shift 5
36	(	Shift 4
36	-	Shift 3
36	begin	Shift 11
36	identifier	Shift 7
36	if	Shift 6
36	integer_number	Shift 2
36	let	Shift 8
36	letrec	Shift 9
36	proc	Shift 10
36	set	Shift 12
36	zero?	Shift 5
37	(	Reduce 10
37	)	Reduce 10
37	,	Reduce 10
37	-	Reduce 10
37	;	Reduce 10
37	begin	Reduce 10
37	else	Reduce 10
37	end	Reduce 10
37	identifier	Reduce 10
37	if	Reduce 10
37	in	Reduce 10
37	integer_number	Reduce 10
37	let	Reduce 10
37	letrec	Reduce 10
37	proc	Reduce 10
37	set	Reduce 10
37	then	Reduce 10
37	zero?	Reduce 10
37	$	Reduce 10
38	(	Reduce 4
38	)	Reduce 4
38	,	Reduce 4
38	-	Reduce 4
38	;	Reduce 4
38	begin	Reduce 4
38	else	Reduce 4
38	end	Reduce 4
38	identifier	Reduce 4
38	if	Reduce 4
38	in	Reduce 4
38	integer_number	Reduce 4
38	let	Reduce 4
38	letrec	Reduce 4
38	proc	Reduce 4
38	set	Reduce 4
38	then	Reduce 4
38	zero?	Reduce 4
38	$	Reduce 4
39	else	Shift 47
40	in	Shift 48
41	(	Reduce 8
41	)	Reduce 8
41	,	Reduce 8
41	-	Reduce 8
41	;	Reduce 8
41	begin	Reduce 8
41	else	Reduce 8
41	end	Reduce 8
41	identifier	Reduce 8
41	if	Reduce 8
41	in	Reduce 8
41	integer_number	Reduce 8
41	let	Reduce 8
41	letrec	Reduce 8
41	proc	Reduce 8
41	set	Reduce 8
41	then	Reduce 8
41	zero?	Reduce 8
41	$	Reduce 8
42	)	Shift 49
43	(	Shift 4
43	-	Shift 3
43	begin	Shift 11
43	identifier	Shift 7
43	if	Shift 6
43	integer_number	Shift 2
43	let	Shift 8
43	letrec	Shift 9
43	proc	Shift 10
43	set	Shift 12
43	zero?	Shift 5
44	end	Reduce 16
45	(	Reduce 12
45	)	Reduce 12
45	,	Reduce 12
45	-	Reduce 12
45	;	Reduce 12
45	begin	Reduce 12
45	else	Reduce 12
45	end	Reduce 12
45	identifier	Reduce 12
45	if	Reduce 12
45	in	Reduce 12
45	integer_number	Reduce 12
45	let	Reduce 12
45	letrec	Reduce 12
45	proc	Reduce 12
45	set	Reduce 12
45	then	Reduce 12
45	zero?	Reduce 12
45	$	Reduce 12
46	)	Shift 51
47	(	Shift 4
47	-	Shift 3
47	begin	Shift 11
47	identifier	Shift 7
47	if	Shift 6
47	integer_number	Shift 2
47	let	Shift 8
47	letrec	Shift 9
47	proc	Shift 10
47	set	Shift 12
47	zero?	Shift 5
48	(	Shift 4
48	-	Shift 3
48	begin	Shift 11
48	identifier	Shift 7
48	if	Shift 6
48	integer_number	Shift 2
48	let	Shift 8
48	letrec	Shift 9
48	proc	Shift 10
48	set	Shift 12
48	zero?	Shift 5
49	=	Shift 54
50	(	Reduce 9
50	)	Reduce 9
50	,	Reduce 9
50	-	Reduce 9
50	;	Reduce 9
50	begin	Reduce 9
50	else	Reduce 9
50	end	Reduce 9
50	identifier	Reduce 9
50	if	Reduce 9
50	in	Reduce 9
50	integer_number	Reduce 9
50	let	Reduce 9
50	letrec	Reduce 9
50	proc	Reduce 9
50	set	Reduce 9
50	then	Reduce 9
50	zero?	Reduce 9
50	$	Reduce 9
51	(	Reduce 3
51	)	Reduce 3
51	,	Reduce 3
51	-	Reduce 3
51	;	Reduce 3
51	begin	Reduce 3
51	else	Reduce 3
51	end	Reduce 3
51	identifier	Reduce 3
51	if	Reduce 3
51	in	Reduce 3
51	integer_number	Reduce 3
51	let	Reduce 3
51	letrec	Reduce 3
51	proc	Reduce 3
51	set	Reduce 3
51	then	Reduce 3
51	zero?	Reduce 3
51	$	Reduce 3
52	(	Reduce 5
52	)	Reduce 5
52	,	Reduce 5
52	-	Reduce 5
52	;	Reduce 5
52	begin	Reduce 5
52	else	Reduce 5
52	end	Reduce 5
52	identifier	Reduce 5
52	if	Reduce 5
52	in	Reduce 5
52	integer_number	Reduce 5
52	let	Reduce 5
52	letrec	Reduce 5
52	proc	Reduce 5
52	set	Reduce 5
52	then	Reduce 5
52	zero?	Reduce 5
52	$	Reduce 5
53	(	Reduce 7
53	)	Reduce 7
53	,	Reduce 7
53	-	Reduce 7
53	;	Reduce 7
53	begin	Reduce 7
53	else	Reduce 7
53	end	Reduce 7
53	identifier	Reduce 7
53	if	Reduce 7
53	in	Reduce 7
53	integer_number	Reduce 7
53	let	Reduce 7
53	letrec	Reduce 7
53	proc	Reduce 7
53	set	Reduce 7
53	then	Reduce 7
53	zero?	Reduce 7
53	$	Reduce 7
54	(	Shift 4
54	-	Shift 3
54	begin	Shift 11
54	identifier	Shift 7
54	if	Shift 6
54	integer_number	Shift 2
54	let	Shift 8
54	letrec	Shift 9
54	proc	Shift 10
54	set	Shift 12
54	zero?	Shift 5
55	identifier	Shift 20
55	in	Reduce 13
56	in	Reduce 14
